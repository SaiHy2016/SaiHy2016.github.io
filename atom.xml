<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  <subtitle>抱着夏天吃西瓜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-23T06:08:05.659Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码片段</title>
    <link href="http://yoursite.com/2017/06/23/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://yoursite.com/2017/06/23/代码片段/</id>
    <published>2017-06-23T05:49:42.000Z</published>
    <updated>2017-06-23T06:08:05.659Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些可能会用到的代码片段</p>
<h1 id="RAF（requestAnimationFrame）"><a href="#RAF（requestAnimationFrame）" class="headerlink" title="RAF（requestAnimationFrame）"></a>RAF（requestAnimationFrame）</h1><pre><code>//判断是否可以使用requestAnimFrame来替换setTimeout
window.requestAnimFrame =
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    function(callback) {
        return window.setTimeout(callback, 1000 / 30);
    };
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些可能会用到的代码片段&lt;/p&gt;
&lt;h1 id=&quot;RAF（requestAnimationFrame）&quot;&gt;&lt;a href=&quot;#RAF（requestAnimationFrame）&quot; class=&quot;headerlink&quot; title=&quot;RAF（requestAnimati
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Mongoose学习笔记</title>
    <link href="http://yoursite.com/2017/06/14/Mongoose%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/06/14/Mongoose学习笔记/</id>
    <published>2017-06-14T06:27:15.000Z</published>
    <updated>2017-06-16T01:21:23.922Z</updated>
    
    <content type="html"><![CDATA[<p>初学Node.js接触到MongoDB数据库，阅读资料中推荐的都是Mongoose模块，可以更加方便的对数据库进行操作。在学习时碰到许多基础问题，查阅了许多资料理来理解，此篇文章就是以自己的理解，记录下入门的基础知识，以及归纳下常用的函数以及格式，方便今后查阅。</p>
<h1 id="引入与连接"><a href="#引入与连接" class="headerlink" title="引入与连接"></a>引入与连接</h1><h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><p>在需要使用的js文件中引入模块。</p>
<pre><code>var mongoose = require(&apos;mongoose&apos;);
</code></pre><p>连接数据库</p>
<pre><code>var db = mongoose.connect(&apos;mongodb://localhost/mongodb&apos;);
</code></pre><p>URL以mongodb:// + [用户名:密码@] +数据库地址[:端口] + 数据库名。（默认端口27017）<br>需要对连接状况进行判断，可以用以下代码：</p>
<pre><code>db.connection.on(&quot;error&quot;, function (error) {  
    console.log(&quot;数据库连接失败：&quot; + error);
});

db.connection.on(&quot;open&quot;, function () {  
    console.log(&quot;数据库连接成功&quot;); 
})

db.connection.on(&apos;disconnected&apos;, function () {    
    console.log(&apos;数据库连接断开&apos;);  
})
</code></pre><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>最常接触到的有三个概念Schema、Model、Entity。按自己理解<br>Schema是定义数据库的结构。类似创建表时的数据定义，但比创建数据库可以做更多的定义，只是没办法通过Schema对数据库进行更改。<br>Model是将Schema定义的结构赋予表名。但可用此名对数据库进行增删查改。<br>Entity是将Model与具体的数据绑定，可以对具体数据自身进行操作，例如保存数据。</p>
<h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>Schema用来定义数据库文档结构，数据库有什么字段、字段是什么类型、默认值、主键之类的信息。除了定义结构外，还能定义文档的实例方法，静态模型方法，复合索引，中间件等。详情查看mongoose官方文档。<br>在引入Mongoose模块var mongoose = require(‘mongoose’)的js文件中进行操作。</p>
<pre><code>var blogSchema = new mongoose.Schema({
    title:  String,
    comments: [{ body: String, date: Date }],
    date: { type: Date, default: Date.now },
    hidden: Boolean,
    meta: {
        votes: Number,
        favs:  Number
}
})
</code></pre><p>这样即定义了一个名为blogSchema的Schema。</p>
<p>如需再添加数据，用add方法。</p>
<pre><code>blogSchema.add( { author: String, body: String} );
</code></pre><p>资料中介绍，Shema不仅定义了文档的结构和属性，还可以定义文档的插件、实例方法、静态方法、复合索引文档生命周期钩子，具体还需查看官方文档。</p>
<p><em>Schema.Type</em></p>
<p>Schema.Type是Mongoose内部定义的数据类型。基本类型有：String、Number、Date、Boolean、Array、Buffer、Mixed、ObjectId。</p>
<p><em>Mixed</em></p>
<p>混合数据类型，可以直接定义{}来使用，以下两种形式等价。</p>
<pre><code>new Schema({mixed: {Schema.Types.Mixed} });
new Schema({mixed: {} });
</code></pre><p><em>ObjectId</em></p>
<p>储存在数据库中的每个数据都会有默认的主键_id，默认存储的是ObjectId。<br>ObjectId是一个12字节的BSON类型字符串。按照字节顺序依次代表：<br>4字节：UNIX时间戳<br>3字节：表示运行MongoDB的机器<br>2字节：表示生成此_id的进程<br>3字节：由一个随机数开始的计数器生成的值</p>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><pre><code>var blogModel = mongoose.model(&apos;Blog&apos;, blogSchema);
</code></pre><p>将名为blogSchema的Schema与Blog名字绑定，即是存入数据库的名字，但存入数据库中的名字是Blogs，会自动添加一个s。<br>这里将Model命名为blogModel，需要对Blog表操作的话，都需要使用变量名blogModel。</p>
<h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>可以绑定具体数据对Model实例化。</p>
<pre><code>var blogEntity = new blogModel({
    title:  &quot;Mongoose&quot;,
    author: &quot;L&quot;,
    body:   &quot;Documents are instances of out model. Creating them and saving to the database is easy&quot;,
    comments: [{ body: &quot;It&apos;s very cool! Thanks a lot!&quot;, date: &quot;2014.07.28&quot; }],
    hidden: false,
    meta: {
        votes: 100,
        favs:  99
    }
})
</code></pre><p>这里将名为blogModel的Model实例化。之后我们可以用blogEntity名对数据进行保存并执行回调。</p>
<pre><code>blogEntity.save(function(err, docs){
    if(err) console.log(err);
    console.log(&apos;保存成功：&apos; + docs);
})
</code></pre><p>在平常使用SQL语句操作数据库时，取得数据后先组织成SQL语句，然后放入执行语句中执行。这里理解也是类似，取得数据先进行实例化，这一步类似于组织成SQL语句，然后再做具体操作例如上面的Save操作。但由于Node.js是异步操作，所以返回的数据利用回调函数来进行操作。</p>
<p>知道了以上概念后就可以对数据进行操作了，下面将列出一些常用的资料，并附上相应的例子。</p>
<h1 id="增查改删-CRUD"><a href="#增查改删-CRUD" class="headerlink" title="增查改删(CRUD)"></a>增查改删(CRUD)</h1><p>所有的参数都是以JSON对象形式传入。</p>
<h2 id="增-C"><a href="#增-C" class="headerlink" title="增(C)"></a>增(C)</h2><blockquote>
<p>Model.create(doc(s), [callback])</p>
</blockquote>
<pre><code>var doc = ({
    title:  &quot;Mongoose&quot;,
    author: &quot;L&quot;,
    body:   &quot;Documents are instances of out model. Creating them and saving to the database is easy&quot;,
    comments: [{ body: &quot;It&apos;s very cool! Thanks a lot!&quot;, date: &quot;2014.07.28&quot; }],
    hidden: false,
    meta: {
        votes: 100,
        favs:  99
    }
};

blogModel.create(doc, function(err, docs){
    if(err) console.log(err);
    console.log(&apos;保存成功：&apos; + docs);
});
</code></pre><blockquote>
<p>Model#save([options], [options.safe], [options.validateBeforeSave], [fn])</p>
</blockquote>
<pre><code>var blogEntity = new blogModel({
    title:  &quot;Mongoose&quot;,
    author: &quot;L&quot;,
    body:   &quot;Documents are instances of out model. Creating them and saving to the database is easy&quot;,
    comments: [{ body: &quot;It&apos;s very cool! Thanks a lot!&quot;, date: &quot;2014.07.28&quot; }],
    hidden: false,
    meta: {
        votes: 100,
        favs:  99
    }
});

blogEntity.save(function(err, docs){
    if(err) console.log(err);
    console.log(&apos;保存成功：&apos; + docs);
});
</code></pre><blockquote>
<p>Model.insertMany(doc(s), [options], [callback])</p>
</blockquote>
<p>多条数据插入，将多条数据一次性插入，相对于循环使用create保存会更加快。</p>
<pre><code>blogModel.insertMany([
    {title: &quot;mongoose1&quot;, author: &quot;L&quot;}, 
    {title: &quot;mongoose2&quot;, author: &quot;L&quot;}
    ], function(err, docs){
        if(err) console.log(err);
        console.log(&apos;保存成功：&apos; + docs);
});
</code></pre><h2 id="查-R"><a href="#查-R" class="headerlink" title="查(R)"></a>查(R)</h2><blockquote>
<p>Model.find(conditions, [projection], [options], [callback])</p>
</blockquote>
<p>conditions：查询条件；projection：控制返回的字段；options：控制选项；callback：回调函数。</p>
<pre><code>blogModel.find({title: &quot;Mongoose&quot;, meta.votes: 100}, {title: 1, author: 1, body: 1}, function(err, docs){
    if(err) console.log(err);
    console.log(&apos;查询结果：&apos; + docs);
})
</code></pre><p>查询“title”标题为“Mongoose”，并且“meta”中“votes”字段值为“100”的记录，返回仅返回“title”、“author”、“body”三个字段的数据。</p>
<blockquote>
<p>Model.findOne([conditions], [projection], [options], [callback])</p>
</blockquote>
<p>conditions：查询条件；projection：控制返回的字段；options：控制选项；callback：回调函数。<br>只返回第一个查询记录。</p>
<blockquote>
<p>Model.findById(id, [projection], [options], [callback])</p>
</blockquote>
<p>id：指定_id的值；projection：控制返回的字段；options：控制选项；callback：回调函数。</p>
<h2 id="改-U"><a href="#改-U" class="headerlink" title="改(U)"></a>改(U)</h2><blockquote>
<p>Model.update(conditions, doc, [options], [callback])</p>
</blockquote>
<p>conditions：查询条件；doc：需要修改的数据，不能修改主键（_id）；options：控制选项；callback：回调函数，返回的是受影响的行数。<br>options有以下选项：<br>　　safe (boolean)： 默认为true。安全模式。<br>　　upsert (boolean)： 默认为false。如果不存在则创建新记录。<br>　　multi (boolean)： 默认为false。是否更新多个查询记录。<br>　　runValidators： 如果值为true，执行Validation验证。<br>　　setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。<br>　　strict (boolean)： 以strict模式进行更新。<br>　　overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。</p>
<pre><code>blogModel.update({title: &quot;Mongoose&quot;}, {author: &quot;L&quot;}, {multi: true}, function(err, docs){
    if(err) console.log(err);
    console.log(&apos;更改成功：&apos; + docs);
})
</code></pre><p>以上代码先查询“title”为“Mongoose”的数据，然后将它的“author”修改为“L”，“multi”为true允许更新多条查询记录。</p>
<blockquote>
<p>Model.updateMany(conditions, doc, [options], [callback])</p>
</blockquote>
<p>一次更新多条</p>
<blockquote>
<p>Model.updateOne(conditions, doc, [options], [callback])</p>
</blockquote>
<p>一次更新一条</p>
<blockquote>
<p>Model.findByIdAndUpdate(id, [update], [options], [callback])</p>
</blockquote>
<p>id：指定_id的值；update：需要修改的数据；options控制选项；callback回调函数。<br>options有以下选项：<br>　　new： bool - 默认为false。返回修改后的数据。<br>　　upsert： bool - 默认为false。如果不存在则创建记录。<br>　　runValidators： 如果值为true，执行Validation验证。<br>　　setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。<br>　　sort： 如果有多个查询条件，按顺序进行查询更新。<br>　　select： 设置数据的返回。</p>
<blockquote>
<p>Model.findOneAndUpdate([conditions], [update], [options], [callback])</p>
</blockquote>
<p>conditions：查询条件；update：需要修改的数据；options控制选项；callback回调函数。<br>options有以下选项：<br>　　new： bool - 默认为false。返回修改后的数据。<br>　　upsert： bool - 默认为false。如果不存在则创建记录。<br>　　fields： {Object|String} - 选择字段。类似.select(fields).findOneAndUpdate()。<br>　　maxTimeMS： 查询用时上限。<br>　　sort： 如果有多个查询条件，按顺序进行查询更新。<br>　　runValidators： 如果值为true，执行Validation验证。<br>　　setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。<br>　　passRawResult： 如果为真，将原始结果作为回调函数第三个参数。</p>
<h2 id="删-D"><a href="#删-D" class="headerlink" title="删(D)"></a>删(D)</h2><blockquote>
<p>Model.remove(conditions, [callback])</p>
</blockquote>
<pre><code>blogModel.remove({author: &quot;L&quot;}, function(err, docs){
    if(err) console.log(err);
    console.log(&apos;删除成功：&apos; + docs);
})
</code></pre><p>删除“author”值为“L”的记录。</p>
<blockquote>
<p>Model.findByIdAndRemove(id, [options], [callback])</p>
</blockquote>
<p>id：指定_id的值；update：需要修改的数据；options控制选项；callback回调函数。<br>options有以下选项：<br>　　sort： 如果有多个查询条件，按顺序进行查询更新。<br>　　select： 设置数据的返回。</p>
<blockquote>
<p>Model.findOneAndRemove(conditions, [options], [callback])</p>
</blockquote>
<p>conditions：查询条件；update：需要修改的数据；options控制选项；callback回调函数。<br>options有以下选项：<br>　　sort： 如果有多个查询条件，按顺序进行查询更新。<br>　　maxTimeMS： 查询用时上限。<br>　　select： 设置数据的返回。</p>
<h1 id="复杂条件查询"><a href="#复杂条件查询" class="headerlink" title="复杂条件查询"></a>复杂条件查询</h1><p>在之前的查询说明中仅演示了确定值的查询，如果遇到更加复杂的情况就需要使用其他一些方法。<br>详细的文档可以在这儿查找 mongodb查询符。</p>
<blockquote>
<p>Query#exec([operation], [callback])</p>
</blockquote>
<p>执行查询，回调函数。<br>使用find()、$where之类查询返回的是Mongoose自己封装的Query对象，使用find()可以在函数最后接上回调来获取查询到的数据。<br>使用链式语句时，可以在之后接.exec()执行查询，并指定回调函数。</p>
<pre><code>blogModel.find({title: &quot;Mongoose&quot;, meta.votes: 100}, {title: 1, author: 1, body: 1}).exec(function(err, docs){
    if(err) console.log(err);
    console.log(&apos;查询结果：&apos; + docs);
})
</code></pre><p>配合各种查询符可以方便的实现复杂的查询。比如我需要查询“title”中以“Mongoose”开头，并且“meta”中“votes”的值小余100。并且按“meta”中“votes”的值升序排序。</p>
<pre><code>blogModel.and([
    { title: { $regex: &quot;Mongoose.+&quot;,&quot;$options&quot;:&quot;i&quot;}},
    { meta.votes: { $lt: 100}}
).sort({ meta.votes: 1}
).exec(function(err, docs){
    if(err) console.log(err);
    console.log(&apos;查询结果：&apos; + docs);
});
</code></pre><h2 id="比较查询运算符"><a href="#比较查询运算符" class="headerlink" title="比较查询运算符"></a>比较查询运算符</h2><blockquote>
<p>$equals 等于 ／ $gt 大于 ／ $gte 大于等于 ／ $lt 小余 ／ $lte 小余等于 ／ $ne 不等于 ／ $in 在数组中 ／ $nin 不在数组中</p>
</blockquote>
<pre><code>blogModel.find({meta.votes: {$lt: 100}});
</code></pre><p>查询“meta”中的“votes”字段值小余100的数据。</p>
<pre><code>blogModel.find({title: {$in: [&apos;Mongoose&apos;, &apos;Mongodb&apos;, &apos;Nodejs&apos;]}});
</code></pre><p>查询“title”为“Mongoose”或“Mongodb”或“Nodejs”其中之一的数据。</p>
<h2 id="逻辑查询运算符"><a href="#逻辑查询运算符" class="headerlink" title="逻辑查询运算符"></a>逻辑查询运算符</h2><blockquote>
<p>$or 或 ／ $and 与 ／ $nor 非</p>
</blockquote>
<pre><code>blogModel.find({ $and: [
    {meta.votes: {$gte: 50}}, 
    {meta.votes: {$lt: 100}}
]});
</code></pre><p>查询“meta”中的“votes”字段值大于等于50到小余100的数据。</p>
<pre><code>blogModel.find({ $nor: [
    {meta.votes: 50}, 
    {meta.votes: 100}
]});
</code></pre><p>查询“meta”中的“votes”字段值不等于50和不等于100的数据。</p>
<p>以上例子也可以写成这样形式，比较清晰，其他类同</p>
<pre><code>blogModel.and([
    {meta.votes: {$gte: 50}}, 
    {meta.votes: {$lt: 100}}
]);

blogModel.nor([
    {meta.votes: 50}, 
    {meta.votes: 100}
]);
</code></pre><h2 id="元素查询运算符"><a href="#元素查询运算符" class="headerlink" title="元素查询运算符"></a>元素查询运算符</h2><blockquote>
<p>$exists　查询的字段值是否存在</p>
</blockquote>
<pre><code>blogModel.find({ title: {$exists: true}});
blogModel.where(&apos;title&apos;).exists(true)；
</code></pre><p>查询存在“title”字段的数据。</p>
<h2 id="评估查询运算符"><a href="#评估查询运算符" class="headerlink" title="评估查询运算符"></a>评估查询运算符</h2><blockquote>
<p>$mod　与数据进行取模运算筛选</p>
</blockquote>
<pre><code>blogModel.find({ meta.votes: {$mod: [4, 0]}});
blogModel.where(&apos;meta.votes&apos;).$mod(4, 0);
</code></pre><p>查找“meta”中的“votes”字段值与4取模后，值为0的数据。</p>
<blockquote>
<p>$regex　使用正则表达式查询数据</p>
</blockquote>
<pre><code>blogModel.find({ title: { $regex: &quot;Mongoose.+&quot;,&quot;$options&quot;:&quot;i&quot;}});
</code></pre><p>搜索以“Mongoose”开头的“title”字段，“options”中的“i”代表不区分大小写。<br>$options参数与其余用法可以查看mongodb文档中 $regex 一节。</p>
<blockquote>
<p>$where　支持js表达式查询</p>
</blockquote>
<pre><code>blogModel.find({ $where: &apos;this.comments.length === 10 || this.name.length === 5&apos; });
blogModel.$where(function() { return this.comments.length === 10 || this.name.length === 5; });
</code></pre><h2 id="数组查询运算符"><a href="#数组查询运算符" class="headerlink" title="数组查询运算符"></a>数组查询运算符</h2><blockquote>
<p>Query#all([path], val)　　查询数组的本身及超集</p>
</blockquote>
<pre><code>blogModel.find( tags: [&apos;nodejs&apos;, &apos;mongoose&apos;]);
</code></pre><p>查询“tags”的字段值同时包含有[‘nodejs’, ‘mongoose’]的数据。只要值中包含此数组即返回数据，若是只包含数组中的一个则不返回此数据。</p>
<blockquote>
<p>Query#elemMatch(path, criteria)　　查询数组的交集</p>
</blockquote>
<pre><code>blogModel.find( $elemMatch: { tags: &apos;mongoose&apos;, author: &apos;L&apos;});
</code></pre><p>查询“tags”为“mongoose”或是“author”为“L”的数据。</p>
<blockquote>
<p>Query#size([path], val)　　查询指定大小的数组</p>
</blockquote>
<pre><code>blogModel.find( tags: { $size: 2});
blogModel.where(&apos;tags&apos;).size(2);
</code></pre><p>查询“tags”数组中包含两个元素的数据。</p>
<h2 id="其他常用的运算符"><a href="#其他常用的运算符" class="headerlink" title="其他常用的运算符"></a>其他常用的运算符</h2><blockquote>
<p>Query#limit(val)　　限制查询返回的数量</p>
</blockquote>
<pre><code>blogModel.find( tags: &apos;mongoose&apos;).limit(5);
</code></pre><p>查询“tags”为“mongoose”的数据，只返回前5个查询结果。</p>
<blockquote>
<p>Query#skip(val)　　跳过前N个查询结果</p>
</blockquote>
<pre><code>blogModel.find( tags: &apos;mongoose&apos;).skip(10).limit(5);
</code></pre><p>查询“tags”为“mongoose”的数据，跳过前10个查询结果，返回从第11个开始的五个查询结果。做分页时常用到这两个，但数据量过大时就会有性能问题。</p>
<blockquote>
<p>Query#sort(arg)　　对结果按某个指定字段进行排序</p>
</blockquote>
<p>1、asc为升序，-1、desc为降序。可以对一个字段进行排序，也可以是多个。</p>
<blockquote>
<p>blogModel.find( tags: ‘mongoose’).skip(10).limit(5).sort(“{ meta.votes: 1}”);</p>
</blockquote>
<p>查询“tags”为“mongoose”的数据，跳过前10个查询结果，返回从第11个开始的五个查询结果。之后按“votes”进行升序排序。</p>
<blockquote>
<p>Query#count([criteria], [callback])　　计数</p>
</blockquote>
<pre><code>blogModel.count({ title: &apos;mongoose&apos;}, function(err, docs){});
</code></pre><p>统计“title”为“mongoose”数据的数量</p>
<blockquote>
<p>Query#select(arg)　　选择指定字段</p>
</blockquote>
<p>在查询中可以选择指定的查询字段，或者排除指定的字段。+为包含，-为排除。</p>
<blockquote>
<p>blogModel.select(‘title body’);</p>
</blockquote>
<p>只包含“title”、“body”字段。</p>
<pre><code>blogModel.select(&apos;-title -body&apos;);
</code></pre><p>排除“title”、“body”字段。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初学Node.js接触到MongoDB数据库，阅读资料中推荐的都是Mongoose模块，可以更加方便的对数据库进行操作。在学习时碰到许多基础问题，查阅了许多资料理来理解，此篇文章就是以自己的理解，记录下入门的基础知识，以及归纳下常用的函数以及格式，方便今后查阅。&lt;/p&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git远程服务器的搭建</title>
    <link href="http://yoursite.com/2017/06/13/git%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/06/13/git远程服务器的搭建/</id>
    <published>2017-06-13T01:40:24.000Z</published>
    <updated>2017-06-16T01:21:23.933Z</updated>
    
    <content type="html"><![CDATA[<p>目标：本地使用git push后可以把本地代码提交到vps的git服务器和github上</p>
<h2 id="在vps设置Git用户并安装Git"><a href="#在vps设置Git用户并安装Git" class="headerlink" title="在vps设置Git用户并安装Git"></a>在vps设置Git用户并安装Git</h2><p>登陆vps，切换到root用户：</p>
<pre><code>su -
</code></pre><p>添加一个叫git的用户来处理仓库：</p>
<pre><code>groupadd git
adduser git -g git
</code></pre><p>然后为这个账户设置密码：</p>
<pre><code>passwd git
</code></pre><p>然后就是装git了：<br><br>Centos/Fedora 执行命令：</p>
<pre><code>yum install git
</code></pre><p>Ubuntu/Debian 执行命令：</p>
<pre><code>apt-get install git
</code></pre><h2 id="将SSH密钥添加到访问列表（其实就是个ssh免密码登陆）"><a href="#将SSH密钥添加到访问列表（其实就是个ssh免密码登陆）" class="headerlink" title="将SSH密钥添加到访问列表（其实就是个ssh免密码登陆）"></a>将SSH密钥添加到访问列表（其实就是个ssh免密码登陆）</h2><p>下面是在vps上进行操作：<br><br>切换到git账户：</p>
<pre><code>su git
</code></pre><p>将刚才产生的 id_rsa.pub 文件上传到git用户的home目录下（/home/git/）。<br><br>然后告诉SSH守护进程去接受哪些ssh密钥：</p>
<pre><code>mkdir ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys
</code></pre><p>下面是<code>windows</code>上的操作：</p>
<blockquote>
<p>如果你的vps ssh端口号不是22可以在本地.ssh文件夹下配置个config文件（没有新建）</p>
</blockquote>
<pre><code>host bwg
hostname xx.xx.xx.xx
port xxxx
</code></pre><p>打开git bash，执行下面的命令，将产生的公钥内容拷贝到vps上的authorized_keys (注意替换命令中的用户名和ip) ：</p>
<pre><code>cat .ssh/id_rsa.pub | ssh  git@bwg &quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot;
</code></pre><p>然后看看能不能免密码登陆：</p>
<pre><code>ssh  git@bwg
</code></pre><p>第一次登陆的时候会让你输入密码，以后再登陆就不需要输入密码了。</p>
<p>=====================================</p>
<p>如果每次登陆都需要密码，则按照如下方法处理：<br><br>1.进行ssh登录时，出现：”Agent admitted failure to sign using the key“ .<br><br>   执行： </p>
<pre><code>$ssh-add
</code></pre><p>   强行将私钥 加进来。<br><br>2.如果无任何错误提示，可以输密码登录，但就是不能无密码登录，在被连接的主机上（如A向B发起ssh连接，则在B上）执行以下几步：</p>
<pre><code>$chmod o-w ~/&lt;br&gt;
$chmod 700 ~/.ssh&lt;br&gt;
$chmod 600 ~/.ssh/authorized_keys&lt;br&gt;
</code></pre><p>3.如果执行了第2步，还是不能无密码登录，再试试下面几个</p>
<pre><code>$ps -Af | grep agent&lt;br&gt;
</code></pre><p>检查ssh代理是否开启，如果有开启的话，kill掉该代理，然后执行下面，重新打开一个ssh代理，如果没有开启，直接执行下面：</p>
<pre><code>$ssh-agent
</code></pre><p>还是不行的话，执行下面，重启一下ssh服务</p>
<pre><code>$sudo service sshd restart
</code></pre><p>4.执行ssh-add时提示“Could not open a connection to your authenticationh agent”而失败<br>执行：<br>    ssh-agent bash</p>
<h2 id="在服务器上创建裸版本库："><a href="#在服务器上创建裸版本库：" class="headerlink" title="在服务器上创建裸版本库："></a>在服务器上创建裸版本库：</h2><p>ps：远程仓库通常只是一个裸仓库（bare repository） — 即一个没有当前工作目录的仓库。因为该仓库只是一个合作媒介，所以不需要从硬盘上取出最新版本的快照；仓库里存放的仅仅是 Git 的数据。简单地说，裸仓库就是你工作目录中 .git 子目录内的内容</p>
<p>我们就在 /home/testgit/ 下创建一个叫 sample.git的裸仓库吧：</p>
<pre><code>mkdir /home/testgit
cd /home/testgit
git init --bare sample.git
</code></pre><p>//这里 git init 是初始化空仓库的意思，而参数 –bare 是代表创建裸仓库，这个参数一定记得带上</p>
<p>当运行完上面的最后一句命令时，会有提示：Initialized empty Git repository in /home/testgit/sample.git/<br>如果你得不到该结果，可能就要回头检查哪一步出问题了</p>
<ol>
<li>创建web站点目录www</li>
</ol>
<p>如果你已经拥有lamp环境，那么相信你已经了解该目录，搭建lamp环境详情可以看我的另一篇博客：centos 7搭建lamp平台环境、Centos7 系统下怎么更改apache默认网站目录</p>
<p>现在我的 web 站点目录在 /home/www</p>
<ol>
<li>在本地克隆服务器上的裸仓库：</li>
</ol>
<p>前提：本地已安装git<br>打开 git bash ，我打算在我的D盘下clone 远程git服务器的版本库</p>
<pre><code>cd /d
git clone git@bwg:/home/testgit/sample.git 
</code></pre><p>在这里如果没有配置公钥的话，会提示输入密码，但是我们可能并不知道密码，那就配置公钥咯： </p>
<p>如果使用git push失败了，极有可能是因为服务器的权限问题，就比如之前我们建的 testgit 文件夹，在这里我的解决方法是：</p>
<pre><code>chown -R git:git testgit
</code></pre><p>将testgit文件夹以及下面的子文件夹都赋给了git,这样就保证了推送成功。</p>
<p>第一次push可能会有一些提示，因为裸版本库还什么都没有，你可能需要 git push origin master写全命令，之后就没必要了，直接 git push 就可以了。</p>
<p>到目前为止，我们完成了第一个任务，实现了一个共享平台，既可拉取数据，又可以推送数据。</p>
<h2 id="实现自动同步到站点目录（www）"><a href="#实现自动同步到站点目录（www）" class="headerlink" title="实现自动同步到站点目录（www）"></a>实现自动同步到站点目录（www）</h2><p>就比如刚才我们往远程仓库推送了index.html文件，虽然提示推送成功，但是我们现在在服务器端还看不到效果，心理总是不爽。又比如我写了个html页面，我想在站点中马上看到，那自动同步就派上用场了。</p>
<p>自动同步功能用到的是 git 的钩子功能，</p>
<p>服务器端：进入裸仓库：/home/testgit/sample.git</p>
<pre><code>cd /home/testgit/sample.git
cd hooks
</code></pre><p>这里我们创建post-receive文件</p>
<pre><code>vim post-receive
</code></pre><p>在该文件里输入以下内容</p>
<pre><code>#!/bin/bash
git --work-tree=/home/www checkout -f
</code></pre><p>保存退出后，将该文件用户及用户组都设置成git</p>
<pre><code>chown git:git post-receive
</code></pre><p>由于该文件其实就是一个shell文件，我们还应该为其设置可执行权限</p>
<pre><code>chmod +x post-receive
</code></pre><p>现在我们可以在本地计算机中修改index.html文件，或者添加一个新文件，提交到远程仓库，然后到/home/www下面，看看有没有我们刚才提交的文件。</p>
<p>如果你在Git推送的工程中发现推送成功 但是在www目录下并没有自己的代码，这时候你可要注意了：这是由于文件夹的权限的原因造成的！ 假设你的www目录的所属的用户组为root，你可以将你的git用户加入这个组;并给git添加写入权限，或者其他解决方法，反正你要服务器上的git用户有权限进入www文件夹。</p>
<h2 id="本地同时提交到vps的git服务器和github"><a href="#本地同时提交到vps的git服务器和github" class="headerlink" title="本地同时提交到vps的git服务器和github"></a>本地同时提交到vps的git服务器和github</h2><p>这里有个方便的方法：在本地仓库.git里config文件里加上你的github地址</p>
<pre><code>[remote &quot;origin&quot;]
url = git@bwg:/home/testgit/sample.git
url = git@github.com:xxx/xxxx.git
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目标：本地使用git push后可以把本地代码提交到vps的git服务器和github上&lt;/p&gt;
&lt;h2 id=&quot;在vps设置Git用户并安装Git&quot;&gt;&lt;a href=&quot;#在vps设置Git用户并安装Git&quot; class=&quot;headerlink&quot; title=&quot;在vps设置
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ejs模板语法</title>
    <link href="http://yoursite.com/2017/06/10/ejs%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2017/06/10/ejs模板语法/</id>
    <published>2017-06-10T00:16:16.000Z</published>
    <updated>2017-06-16T01:21:23.922Z</updated>
    
    <content type="html"><![CDATA[<p>1、EJS是一个简单高效的模板语言，通过数据和模板，可以生成HTML标记文本。可以说EJS是一个JavaScript库，EJS可以同时运行在客户端和服务器端，客户端安装直接引入文件即可，服务器端用npm包安装</p>
<p>2、EJS的特点：</p>
<ul>
<li>快速编译和渲染</li>
<li>简单的模板标签</li>
<li>自定义标记分隔符</li>
<li>支持文本包含</li>
<li>支持浏览器端和服务器端</li>
<li>模板静态缓存</li>
<li>支持express视图系统</li>
</ul>
<p>3、EJS成员函数：</p>
<ul>
<li><p>Render(str,data,[option]):直接渲染字符串并生成html<br><br>str：需要解析的字符串模板<br><br>data：数据<br><br>option：配置选项<br></p>
</li>
<li><p>Compile(str,[option]):编译字符串得到模板函数<br><br>str：需要解析的字符串模板<br><br>option：配置选项<br></p>
</li>
</ul>
<p>两个函数包括的配置选项如下：<br><img src="/2017/06/10/ejs模板语法/option.png" alt="option配置" title="option配置"></p>
<p>4、EJS常用标签</p>
<ul>
<li>&lt;% %&gt;流程控制标签</li>
<li>&lt;%= %&gt;输出标签（原文输出HTML标签）</li>
<li>&lt;%- %&gt;输出标签（HTML会被浏览器解析）</li>
<li>&lt;%# %&gt;注释标签</li>
<li>% 对标记进行转义</li>
<li><p>-%&gt;去掉没用的空格</p>
<p>说明：ejs中的逻辑代码全部用JavaScript</p>
</li>
</ul>
<p>5、接下来看一个例子就可以明白EJS的简单语法了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</div><div class="line">&lt;title&gt;EJS Examples&lt;/title&gt;</div><div class="line">&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</div><div class="line">&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</div><div class="line">&lt;link href=&quot;&quot; rel=&quot;stylesheet&quot;&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;ejs.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script &gt;</div><div class="line">    var data=&#123;flag:false,</div><div class="line">                   data1:[&quot;====1&quot;,&quot;====2&quot;,&quot;====3&quot;],</div><div class="line">                   data2:[&quot;====4&quot;,&quot;====5&quot;,&quot;====6&quot;]</div><div class="line">               &#125;;</div><div class="line"></div><div class="line">    window.onload=function()&#123;</div><div class="line">        var tem=document.getElementById(&quot;tem&quot;).innerHTML;</div><div class="line">        var html=ejs.render(tem,data);</div><div class="line">        document.getElementsByTagName(&quot;body&quot;)[0].innerHTML=html;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; id=&quot;tem&quot;&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;%if(flag)&#123;%&gt;</div><div class="line">      &lt;%for (var i=0;i&lt;data1.length;i++)&#123;%&gt;</div><div class="line">      &lt;li&gt;&lt;%=data1[i]%&gt;&lt;/li&gt;</div><div class="line">      &lt;%&#125;%&gt;</div><div class="line">      &lt;%&#125;else&#123;%&gt;</div><div class="line">          &lt;%for(var i=0;i&lt;data2.length;i++)&#123;%&gt;</div><div class="line">          &lt;li&gt;&lt;%=data2[i]%&gt;&lt;/li&gt;</div><div class="line">          &lt;%&#125;%&gt;</div><div class="line">          &lt;%&#125;%&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>运行后结果如下：</p>
<ul>
<li>====4</li>
<li>====5</li>
<li>====6</li>
</ul>
<p>4、过滤器（把结果进一步加工的函数）：<br><img src="/2017/06/10/ejs模板语法/filter1.png" alt=""><br><img src="/2017/06/10/ejs模板语法/filter2.png" alt=""><br><img src="/2017/06/10/ejs模板语法/filter3.png" alt=""></p>
<p>语法如下：</p>
<pre><code>&lt;%=: data.age | plus:5%&gt;
</code></pre><p>  注意:和|两个符号:<br><br>此外，还有文件包含的语法：</p>
<pre><code>&lt;%- include(path) %&gt;
</code></pre><p>参考文章<a href="http://www.jianshu.com/p/67dda091fc68" target="_blank" rel="external">地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、EJS是一个简单高效的模板语言，通过数据和模板，可以生成HTML标记文本。可以说EJS是一个JavaScript库，EJS可以同时运行在客户端和服务器端，客户端安装直接引入文件即可，服务器端用npm包安装&lt;/p&gt;
&lt;p&gt;2、EJS的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>meta一些设置（未完）</title>
    <link href="http://yoursite.com/2017/06/07/meta%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/06/07/meta的一些设置/</id>
    <published>2017-06-07T02:26:26.000Z</published>
    <updated>2017-06-28T06:15:04.983Z</updated>
    
    <content type="html"><![CDATA[<p>META标签分两大部分：HTTP标题信息(HTTP-EQUIV)和页面描述信息(NAME)。</p>
<h2 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h2> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1、<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Generator"</span> <span class="attr">contect</span>=<span class="string">""</span>&gt;</span>用以说明生成工具（如Microsoft FrontPage 4.0）等；</div><div class="line"></div><div class="line">2、<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"KEYWords"</span> <span class="attr">contect</span>=<span class="string">""</span>&gt;</span>向搜索引擎说明你的网页的关键词；</div><div class="line"></div><div class="line">3、<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"DEscription"</span> <span class="attr">contect</span>=<span class="string">""</span>&gt;</span>告诉搜索引擎你的站点的主要内容；</div><div class="line"></div><div class="line">4、<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Author"</span> <span class="attr">contect</span>=<span class="string">"你的姓名"</span>&gt;</span>告诉搜索引擎你的站点的制作的作者；</div><div class="line"></div><div class="line">5、<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Robots"</span> <span class="attr">contect</span>= <span class="string">"all|none|index|noindex|follow|nofollow"</span>&gt;</span></div><div class="line"></div><div class="line">6、<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”renderer”</span> <span class="attr">content</span>=<span class="string">”webkit|ie-comp|ie-stand”</span> /&gt;</span> 国产浏览器高速模式</div><div class="line"></div><div class="line">　 其中的属性说明如下：</div><div class="line">　 设定为all：文件将被检索，且页面上的链接可以被查询；</div><div class="line">  设定为none：文件将不被检索，且页面上的链接不可以被查询；</div><div class="line">  设定为index：文件将被检索；</div><div class="line">  设定为follow：页面上的链接可以被查询；</div><div class="line">  设定为noindex：文件将不被检索，但页面上的链接可以被查询；</div><div class="line">  设定为nofollow：文件将不被检索，页面上的链接可以被查询。</div></pre></td></tr></table></figure>
<h2 id="http-equiv属性"><a href="#http-equiv属性" class="headerlink" title="http-equiv属性"></a>http-equiv属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">1、&lt;meta http-equiv=&quot;Content-Type&quot; contect=&quot;text/html&quot;;charset=gb_2312-80&quot;&gt;和 &lt;meta http-equiv=&quot;Content-Language&quot; contect=&quot;zh-CN&quot;&gt;用以说明主页制作所使用的文字以及语言；又如英文是ISO-8859-1字符集，还有BIG5、utf-8、shift-Jis、Euc、Koi8-2等字符集；</div><div class="line">2、&lt;meta http-equiv=&quot;Refresh&quot; contect=&quot;n;url=http://yourlink&quot;&gt;定时让网页在指定的时间n内，跳转到页面http://yourlink；</div><div class="line">3、&lt;meta http-equiv=&quot;Expires&quot; contect=&quot;Mon,12 May 2001 00:20:00 GMT&quot;&gt;可以用于设定网页的到期时间，一旦过期则必须到服务器上重新调用。需要注意的是必须使用GMT时间格式；</div><div class="line">4、&lt;meta http-equiv=&quot;Pragma&quot; contect=&quot;no-cache&quot;&gt;是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出；</div><div class="line">5、&lt;meta http-equiv=&quot;set-cookie&quot; contect=&quot;Mon,12 May 2001 00:20:00 GMT&quot;&gt;cookie设定，如果网页过期，存盘的cookie将被删除。需要注意的也是必须使用GMT时间格式；</div><div class="line">6、&lt;meta http-equiv=&quot;Pics-label&quot; contect=&quot;&quot;&gt;网页等级评定，在IE的internet选项中有一项内容设置，可以防止浏览一些受限制的网站，而网站的限制级别就是通过meta属性来设置的；</div><div class="line">7、&lt;meta http-equiv=&quot;windows-Target&quot; contect=&quot;_top&quot;&gt;强制页面在当前窗口中以独立页面显示，可以防止自己的网页被别人当作一个frame页调用；</div><div class="line">8、&lt;meta http-equiv=&quot;Page-Enter&quot; contect=&quot;revealTrans(duration=10,transtion= 50)&quot;&gt;和&lt;meta http-equiv=&quot;Page-Exit&quot; contect=&quot;revealTrans(duration=20，transtion=6)&quot;&gt;设定进入和离开页面时的特殊效果，这个功能即FrontPage中的“格式/网页过渡”，不过所加的页面不能够是一个frame页面。</div><div class="line">Open Graph Protocol</div><div class="line">Meta Property=og标签是什么呢?</div><div class="line">og是一种新的HTTP头部标记，即Open Graph Protocol：</div><div class="line"></div><div class="line">The Open Graph Protocol enables any web page to become a rich object in a social graph.+ n3 &#125;</div><div class="line"></div><div class="line">即这种协议可以让网页成为一个“富媒体对象”。</div><div class="line">用了Meta Property=og标签，就是你同意了网页内容可以被其他社会化网站引用等，目前这种协议被SNS网站如Fackbook、renren采用。</div><div class="line">SNS已经成为网络上的一大热门应用，优质的内容通过分享在好友间迅速传播。为了提高站外内容的传播效率，2010年F8会议上Facebook公布 了一套开放内容协议(Open Graph Protocol)，任何网页只要遵守该协议，SNS就能从页面上提取最有效的信息并呈现给用户。</div><div class="line"></div><div class="line">  &lt;meta property=”og:type” content=”video”/&gt;</div><div class="line">  &lt;meta property=”og:title” content=”五月天_突然好想你MV现场版”/&gt;</div><div class="line">  &lt;meta property=”og:image” content=”http://g1.ykimg.com/0100641F464A ... 9-76EA-E5E20A1887C4″/&gt;</div><div class="line">  &lt;meta property=”og:url” content=”http://v.youku.com/v_show/id_XMTIyMTY5NzMy.html”/&gt;</div><div class="line">  &lt;meta property=”og:videosrc” content=”http://player.youku.com/player.p ... AutoPlay=true/v.swf”/&gt;</div><div class="line">  &lt;meta property=”og:width” content=”500″ /&gt;</div><div class="line">  &lt;meta property=”og:height” content=”416″ /&gt;</div><div class="line">  &lt;meta property=”og:type” content=”video”/&gt;</div><div class="line">  &lt;meta property=”og:title” content=”五月天_突然好想你MV现场版_AA”/&gt;</div><div class="line">  &lt;meta property=”og:image” content=”http://g1.ykimg.com/0100641F464A ... EA-E5E20A1887C44444″/&gt;</div><div class="line">  &lt;meta property=”og:url” content=”http://v.youku.com/v_show/id_XMTIyMTY5NzMyyyyyyyyyyyyyyyy.html”/&gt;</div><div class="line">  &lt;meta property=”og:videosrc” content=”http://player.youku.com/player.p ... AutoPlay=true/y.swf”/&gt;</div><div class="line">  &lt;meta property=”og:width” content=”600″ /&gt;</div><div class="line">  &lt;meta property=”og:height” content=”716″/&gt;</div><div class="line"></div><div class="line">  &lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-CN&quot; /&gt;    html代码语言采用中文</div><div class="line">  &lt;meta property=&quot;qc:admins&quot; content=&quot;153033120760567656375&quot; /&gt;  QQ登陆声明</div><div class="line">  &lt;meta property=&quot;wb:webmaster&quot; content=&quot;e9da5e10879ed7c9&quot; /&gt;   微博登陆声明</div><div class="line">  &lt;meta name=&quot;google-site-verification&quot; content=&quot;tPkY-Quj85Ni78uIWOIREPO9k5xczDgjch10qsLfVfs&quot; /&gt; google的网站认证代码，证明该网站的所有者是你</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;META标签分两大部分：HTTP标题信息(HTTP-EQUIV)和页面描述信息(NAME)。&lt;/p&gt;
&lt;h2 id=&quot;name-属性&quot;&gt;&lt;a href=&quot;#name-属性&quot; class=&quot;headerlink&quot; title=&quot;name 属性&quot;&gt;&lt;/a&gt;name 属性&lt;/h2
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>防止页面被iframe嵌套</title>
    <link href="http://yoursite.com/2017/06/06/%E9%98%B2%E6%AD%A2%E7%BD%91%E9%A1%B5%E8%A2%ABiframe%E5%B5%8C%E5%A5%97/"/>
    <id>http://yoursite.com/2017/06/06/防止网页被iframe嵌套/</id>
    <published>2017-06-06T02:40:42.000Z</published>
    <updated>2017-06-16T01:21:23.935Z</updated>
    
    <content type="html"><![CDATA[<p>自己的网页被别人盗用很不爽吧，以下是几种解方案</p>
<ol>
<li>方案一<pre><code>if (top != self) {
  top.location = self.location;
}
</code></pre></li>
<li>方案二<pre><code>if (self == top) {
  var theBody = document.getElementsByTagName(&apos;body&apos;)[0];
  theBody.style.display = &quot;block&quot;;
} else {
  top.location = self.location;
}
</code></pre></li>
<li>方案三<pre><code>在响应头里加一个X-Frame-Options
   取值有三种，大部分浏览器都支持：
  1. DENY：浏览器拒绝当前页面加载任何Frame页面
  2. SAMEORIGIN：frame页面的地址只能为同源域名下的页面
  3. ALLOW-FROM origin：origin为允许frame加载的页面地址
</code></pre></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己的网页被别人盗用很不爽吧，以下是几种解方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方案一&lt;pre&gt;&lt;code&gt;if (top != self) {
  top.location = self.location;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;方案二&lt;pre&gt;&lt;c
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>省略号动画</title>
    <link href="http://yoursite.com/2017/06/05/%E7%9C%81%E7%95%A5%E5%8F%B7%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2017/06/05/省略号动画/</id>
    <published>2017-06-05T02:40:42.000Z</published>
    <updated>2017-06-16T01:21:23.935Z</updated>
    
    <content type="html"><![CDATA[<p>一些漂亮的等待动画：<a href="http://simbyone.com/demo/30-css-page-preload-animations/" target="_blank" rel="external">点这里</a></p>
<p>三个点的简单等待的动画效果：</p>
<pre><code>.dotting{
        display: inline-block; 
        width: 20px; 
        min-height: 4px;
        padding-right: 4px;
        border-left: 4px solid currentColor;
         border-right: 4px solid currentColor;
        background-color: currentColor; 
        background-clip: content-box;
        box-sizing: border-box;
        -webkit-animation: dot 4s infinite step-start both;
        animation: dot 4s infinite step-start both;
        &amp;:before{
            content: &apos;...&apos;; /* IE8 */
        }
        &amp;::before{
            content: &apos;&apos;;
        }
    }
  :root .dotting { margin-left: 4px; padding-left: 4px; } /* IE9+ */
  @-webkit-keyframes dot {
      25% {
        border-color: transparent; background-color: transparent;               }
      50% {
          border-right-color: transparent; background-color: transparent; 
      }
      75% { border-right-color: transparent; }
      }
  @keyframes dot {
    25% { border-color: transparent; background-color: transparent; }
    50% { border-right-color: transparent; background-color: transparent; }
    75% { border-right-color: transparent; }
  }
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些漂亮的等待动画：&lt;a href=&quot;http://simbyone.com/demo/30-css-page-preload-animations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三个点的简单等待的动画效果：
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>placeholder支持</title>
    <link href="http://yoursite.com/2017/06/01/placeholder%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>http://yoursite.com/2017/06/01/placeholder的支持/</id>
    <published>2017-06-01T00:16:16.000Z</published>
    <updated>2017-06-16T01:21:23.934Z</updated>
    
    <content type="html"><![CDATA[<p>IE9及以上不支持placeholder属性，可以通过一下方法模拟：</p>
<pre><code>if(&apos;placeholder&apos; in document.createElement(&apos;input&apos;)){
        }else{
            $(&apos;[placeholder]&apos;).focus(function() {
                var input = $(this);
                if (input.val() == input.attr(&apos;placeholder&apos;)) {
                    input.val(&apos;&apos;);
                    input.removeClass(&apos;placeholder&apos;);
                }
            }).blur(function() {
                var input = $(this);
                if (input.val() == &apos;&apos; || input.val() == input.attr(&apos;placeholder&apos;)) {
                    input.addClass(&apos;placeholder&apos;);
                    input.val(input.attr(&apos;placeholder&apos;));
                }
            }).blur();
        }
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IE9及以上不支持placeholder属性，可以通过一下方法模拟：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(&amp;apos;placeholder&amp;apos; in document.createElement(&amp;apos;input&amp;apos;)){
        }else
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>移动端touch事件整理</title>
    <link href="http://yoursite.com/2017/05/28/%E7%A7%BB%E5%8A%A8%E7%AB%AFtouch%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/05/28/移动端touch事件/</id>
    <published>2017-05-28T06:44:44.000Z</published>
    <updated>2017-06-16T01:21:23.935Z</updated>
    
    <content type="html"><![CDATA[<p>移动端触摸事件</p>
<ul>
<li><code>touchstart事件</code>：触摸时触发（坐标信息可以从<code>touches</code>里获得）</li>
<li><code>touchmove事件</code>：滑动时触发（同上）</li>
<li><code>touched事件</code>：手指离开时触发（需要从<code>changeTouches</code>中获取离开时坐标）</li>
<li><code>touchcancel事件</code>：当系统停止跟踪触摸的时候触发</li>
</ul>
<p>上面的这些事件都会冒泡，也都可以取消。虽然这些触摸事件没有在DOM规范中定义，但是它们却是以兼容DOM的方式实现的。所以，每个触摸事件的event对象都提供了在鼠标实践中常见的属性：bubbles(起泡事件的类型)、cancelable(是否用 preventDefault() 方法可以取消与事件关联的默认动作)、clientX(返回当事件被触发时，鼠标指针的水平坐标)、clientY(返回当事件触发时，鼠标指针的垂直坐标)、screenX(当某个事件被触发时，鼠标指针的水平坐标)和screenY(返回当某个事件被触发时，鼠标指针的垂直坐标)。除了常见的DOM属性，触摸事件还包含下面三个用于跟踪触摸的属性。</p>
<ul>
<li><code>touches</code>：表示当前跟踪的触摸操作的touch对象的数组。</li>
<li><code>targetTouches</code>：特定于事件目标的Touch对象的数组。</li>
<li><p><code>changeTouches</code>：表示自上次触摸以来发生了什么改变的Touch对象的数组。</p>
<p>每个Touch对象包含的属性如下。</p>
<ul>
<li><code>clientX</code>：触摸目标在视口中的x坐标。</li>
<li><code>clientY</code>：触摸目标在视口中的y坐标。</li>
<li><code>identifier</code>：标识触摸的唯一ID。</li>
<li><code>pageX</code>：触摸目标在页面中的x坐标。</li>
<li><code>pageY</code>：触摸目标在页面中的y坐标。</li>
<li><code>screenX</code>：触摸目标在屏幕中的x坐标。</li>
<li><code>screenY</code>：触摸目标在屏幕中的y坐标。</li>
<li><code>target</code>：触目的DOM节点目标。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端触摸事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;touchstart事件&lt;/code&gt;：触摸时触发（坐标信息可以从&lt;code&gt;touches&lt;/code&gt;里获得）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touchmove事件&lt;/code&gt;：滑动时触发（同上）&lt;/li&gt;
&lt;li
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>图片预览上传</title>
    <link href="http://yoursite.com/2017/05/27/%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2017/05/27/图片预览上传/</id>
    <published>2017-05-27T08:36:36.000Z</published>
    <updated>2017-06-16T01:21:23.935Z</updated>
    
    <content type="html"><![CDATA[<p>图片的上传和预览</p>
<ul>
<li>HTML的布局<pre><code>&lt;div class=&apos;uploadImgBox&apos;&gt;
&lt;ul class=&apos;imgList&apos; id=&quot;imgListModify&quot;&gt;
  &lt;li style=&apos;background-image:url(img/2.jpg)&apos;&gt;&lt;span&gt;&amp;times;&lt;/span&gt;&lt;/li&gt;
  &lt;li style=&apos;background-image:url(img/1.jpg)&apos;&gt;&lt;span&gt;&amp;times;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a class=&apos;button button-big&apos; onclick=&quot;loadImg(this)&quot;&gt;上传图片&lt;/a&gt;
&lt;input type=&quot;file&quot; accept=&quot;image/*&quot; multiple id=&quot;abc&quot;&gt;
&lt;/div&gt;
</code></pre></li>
<li>SCSS样式<pre><code>.uploadImgBox{
    padding: 0 .75rem;
.imgList {
    display: flex;
    padding-left: 0;
    margin-bottom: .5rem;
    flex-flow: row wrap;
    li{
        text-align: center;
        width: 100px;
        height: 100px;
        background-repeat: no-repeat;
        background-position: center center;
        background-size: cover;
        margin: .5rem .5rem .5rem 0;
        position: relative;
        span{
            width: 20px;
            height: 20px;
            line-height: 20px;
            font-size: 1.2em;
            background: #000;
            border-radius: 50%;
            color:#fff;
            position: absolute;
            right: 0;
            top: 0;
            margin: -10px -10px 0 0;
        }
    }
}
input {
    display: none;
}
}
</code></pre></li>
<li>js代码<pre><code>function loadImg(that) {
     if (typeof FileReader === &apos;undefined&apos;) {
        $.toast(&apos;您的手机不支持上传图片&apos;, 2000,&apos;toast-11&apos;);
         return 
     }
    var inp = $(that).next(&apos;input&apos;)[0]
        inp.click()
        inp.onchange=function() {
            var imgFile = inp.files
            if (imgFile.length == 0) return
            if (imgFile.length &gt; 9){
                $.toast(&apos;最多上传9张图片&apos;)
            }
            $(imgFile).each(function (i, v) {
                if (!/\/(?:jpeg|png|gif)/i.test(v.type)) return;
                var reader = new FileReader()
                reader.readAsDataURL(v);
                reader.onload = function () { 
                    var url = this.result
                    $(that).prev(&apos;ul&apos;).append(&quot;&lt;li style=&apos;background-image:url(&quot;+url+&quot;)&apos;&gt;&lt;span&gt;&amp;times;&lt;/span&gt;&lt;/li&gt;&quot;)
                 }
            })
        }
}
</code></pre></li>
</ul>
<h3 id="参考代码-（压缩-预览-上传）原网址找不到了："><a href="#参考代码-（压缩-预览-上传）原网址找不到了：" class="headerlink" title="参考代码 （压缩 预览 上传）原网址找不到了："></a>参考代码 （压缩 预览 上传）原网址找不到了：</h3><p>js部分：<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> filechooser = <span class="built_in">document</span>.getElementById(<span class="string">"chooseImg"</span>);</div><div class="line">	<span class="comment">//    用于压缩图片的canvas</span></div><div class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">	<span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">	<span class="comment">//    瓦片canvas</span></div><div class="line">	<span class="keyword">var</span> tCanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">	<span class="keyword">var</span> tctx = tCanvas.getContext(<span class="string">"2d"</span>);</div><div class="line">	<span class="keyword">var</span> maxsize = <span class="number">100</span> * <span class="number">1024</span>;</div><div class="line">	$(<span class="string">"#upload"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		filechooser.click();</div><div class="line">	&#125;)</div><div class="line">	filechooser.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.files.length) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">var</span> files = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>.files);</div><div class="line">		<span class="keyword">if</span> (files.length &gt; <span class="number">9</span>) &#123;</div><div class="line">			alert(<span class="string">"最多同时只可上传9张图片"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file, i</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="regexp">/\/(?:jpeg|png|gif)/i</span>.test(file.type)) <span class="keyword">return</span>;</div><div class="line">			<span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">			<span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">			<span class="comment">//          获取图片大小</span></div><div class="line">			<span class="keyword">var</span> size = file.size / <span class="number">1024</span> &gt; <span class="number">1024</span> ? (~~(<span class="number">10</span> * file.size / <span class="number">1024</span> / <span class="number">1024</span>)) / <span class="number">10</span> + <span class="string">"MB"</span> : ~~(file.size / <span class="number">1024</span>) + <span class="string">"KB"</span>;</div><div class="line">			li.innerHTML = <span class="string">'&lt;div class="progress"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="size"&gt;'</span> + size + <span class="string">'&lt;/div&gt;'</span>;</div><div class="line">			$(<span class="string">".img-list"</span>).append($(li));</div><div class="line">			reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> result = <span class="keyword">this</span>.result;</div><div class="line">				<span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">				img.src = result;</div><div class="line">				$(li).css(<span class="string">"background-image"</span>, <span class="string">"url("</span> + result + <span class="string">")"</span>);</div><div class="line">				<span class="comment">//如果图片大小小于100kb，则直接上传</span></div><div class="line">				<span class="keyword">if</span> (result.length &lt;= maxsize) &#123;</div><div class="line">					img = <span class="literal">null</span>;</div><div class="line">					upload(result, file.type, $(li));</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//      图片加载完毕之后进行压缩，然后上传</span></div><div class="line">				<span class="keyword">if</span> (img.complete) &#123;</div><div class="line">					callback();</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					img.onload = callback;</div><div class="line">				&#125;</div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> data = compress(img);</div><div class="line">					upload(data, file.type, $(li));</div><div class="line">					img = <span class="literal">null</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">			reader.readAsDataURL(file);</div><div class="line">		&#125;)</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">//    使用canvas对大图片进行压缩</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">img</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> initSize = img.src.length;</div><div class="line">		<span class="keyword">var</span> width = img.width;</div><div class="line">		<span class="keyword">var</span> height = img.height;</div><div class="line">		<span class="comment">//如果图片大于四百万像素，计算压缩比并将大小压至400万以下</span></div><div class="line">		<span class="keyword">var</span> ratio;</div><div class="line">		<span class="keyword">if</span> ((ratio = width * height / <span class="number">4000000</span>) &gt; <span class="number">1</span>) &#123;</div><div class="line">			ratio = <span class="built_in">Math</span>.sqrt(ratio);</div><div class="line">			width /= ratio;</div><div class="line">			height /= ratio;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ratio = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		canvas.width = width;</div><div class="line">		canvas.height = height;</div><div class="line">		<span class="comment">//        铺底色</span></div><div class="line">		ctx.fillStyle = <span class="string">"#fff"</span>;</div><div class="line">		ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</div><div class="line">		<span class="comment">//如果图片像素大于100万则使用瓦片绘制</span></div><div class="line">		<span class="keyword">var</span> count;</div><div class="line">		<span class="keyword">if</span> ((count = width * height / <span class="number">1000000</span>) &gt; <span class="number">1</span>) &#123;</div><div class="line">			count = ~~(<span class="built_in">Math</span>.sqrt(count) + <span class="number">1</span>); <span class="comment">//计算要分成多少块瓦片</span></div><div class="line">			<span class="comment">//            计算每块瓦片的宽和高</span></div><div class="line">			<span class="keyword">var</span> nw = ~~(width / count);</div><div class="line">			<span class="keyword">var</span> nh = ~~(height / count);</div><div class="line">			tCanvas.width = nw;</div><div class="line">			tCanvas.height = nh;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; count; j++) &#123;</div><div class="line">					tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, <span class="number">0</span>, <span class="number">0</span>, nw, nh);</div><div class="line">					ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//进行最小压缩</span></div><div class="line">		<span class="keyword">var</span> ndata = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.1</span>);</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'压缩前：'</span> + initSize);</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'压缩后：'</span> + ndata.length);</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'压缩率：'</span> + ~~(<span class="number">100</span> * (initSize - ndata.length) / initSize) + <span class="string">"%"</span>);</div><div class="line">		tCanvas.width = tCanvas.height = canvas.width = canvas.height = <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> ndata;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//    图片上传，将base64的图片转成二进制对象，塞进formdata上传</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">basestr, type, $li</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> text = <span class="built_in">window</span>.atob(basestr.split(<span class="string">","</span>)[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(text.length);</div><div class="line">		<span class="keyword">var</span> pecent = <span class="number">0</span>,</div><div class="line">			loop = <span class="literal">null</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</div><div class="line">			buffer[i] = text.charCodeAt(i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> blob = getBlob([buffer], type);</div><div class="line">		<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">		<span class="keyword">var</span> formdata = getFormData();</div><div class="line">		formdata.append(<span class="string">'imagefile'</span>, blob);</div><div class="line">		xhr.open(<span class="string">'post'</span>, <span class="string">'/cupload'</span>);</div><div class="line">		xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</div><div class="line">				<span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line">				<span class="keyword">var</span> imagedata = jsonData[<span class="number">0</span>] || &#123;&#125;;</div><div class="line">				<span class="keyword">var</span> text = imagedata.path ? <span class="string">'上传成功'</span> : <span class="string">'上传失败'</span>;</div><div class="line">				<span class="built_in">console</span>.log(text + <span class="string">'：'</span> + imagedata.path);</div><div class="line">				clearInterval(loop);</div><div class="line">				<span class="comment">//当收到该消息时上传完毕</span></div><div class="line">				$li.find(<span class="string">".progress span"</span>).animate(&#123;</div><div class="line">					<span class="string">'width'</span>: <span class="string">"100%"</span></div><div class="line">				&#125;, pecent &lt; <span class="number">95</span> ? <span class="number">200</span> : <span class="number">0</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">					$(<span class="keyword">this</span>).html(text);</div><div class="line">				&#125;);</div><div class="line">				<span class="keyword">if</span> (!imagedata.path) <span class="keyword">return</span>;</div><div class="line">				$(<span class="string">".pic-list"</span>).append(<span class="string">'&lt;a href="'</span> + imagedata.path + <span class="string">'"&gt;'</span> + imagedata.name + <span class="string">'（'</span> + imagedata.size + <span class="string">'）&lt;img src="'</span> + imagedata.path + <span class="string">'" /&gt;&lt;/a&gt;'</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">//数据发送进度，前50%展示该进度</span></div><div class="line">		xhr.upload.addEventListener(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (loop) <span class="keyword">return</span>;</div><div class="line">			pecent = ~~(<span class="number">100</span> * e.loaded / e.total) / <span class="number">2</span>;</div><div class="line">			$li.find(<span class="string">".progress span"</span>).css(<span class="string">'width'</span>, pecent + <span class="string">"%"</span>);</div><div class="line">			<span class="keyword">if</span> (pecent == <span class="number">50</span>) &#123;</div><div class="line">				mockProgress();</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="literal">false</span>);</div><div class="line">		<span class="comment">//数据后50%用模拟进度</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">mockProgress</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (loop) <span class="keyword">return</span>;</div><div class="line">			loop = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">				pecent++;</div><div class="line">				$li.find(<span class="string">".progress span"</span>).css(<span class="string">'width'</span>, pecent + <span class="string">"%"</span>);</div><div class="line">				<span class="keyword">if</span> (pecent == <span class="number">99</span>) &#123;</div><div class="line">					clearInterval(loop);</div><div class="line">				&#125;</div><div class="line">			&#125;, <span class="number">100</span>)</div><div class="line">		&#125;</div><div class="line">		xhr.send(formdata);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取blob对象的兼容性写法</div><div class="line">	 * @param buffer</div><div class="line">	 * @param format</div><div class="line">	 * @returns &#123;*&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getBlob</span>(<span class="params">buffer, format</span>) </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Blob(buffer, &#123;</div><div class="line">				<span class="attr">type</span>: format</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">			<span class="keyword">var</span> bb = <span class="keyword">new</span>(<span class="built_in">window</span>.BlobBuilder || <span class="built_in">window</span>.WebKitBlobBuilder || <span class="built_in">window</span>.MSBlobBuilder);</div><div class="line">			buffer.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">buf</span>) </span>&#123;</div><div class="line">				bb.append(buf);</div><div class="line">			&#125;);</div><div class="line">			<span class="keyword">return</span> bb.getBlob(format);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取formdata</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getFormData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> isNeedShim = ~navigator.userAgent.indexOf(<span class="string">'Android'</span>) &amp;&amp;</div><div class="line">			~navigator.vendor.indexOf(<span class="string">'Google'</span>) &amp;&amp;</div><div class="line">			!~navigator.userAgent.indexOf(<span class="string">'Chrome'</span>) &amp;&amp;</div><div class="line">			navigator.userAgent.match(<span class="regexp">/AppleWebKit\/(\d+)/</span>).pop() &lt;= <span class="number">534</span>;</div><div class="line">		<span class="keyword">return</span> isNeedShim ? <span class="keyword">new</span> FormDataShim() : <span class="keyword">new</span> FormData()</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * formdata 补丁, 给不支持formdata上传blob的android机打补丁</div><div class="line">	 * @constructor</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">FormDataShim</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.warn(<span class="string">'using formdata shim'</span>);</div><div class="line">		<span class="keyword">var</span> o = <span class="keyword">this</span>,</div><div class="line">			parts = [],</div><div class="line">			boundary = <span class="built_in">Array</span>(<span class="number">21</span>).join(<span class="string">'-'</span>) + (+<span class="keyword">new</span> <span class="built_in">Date</span>() * (<span class="number">1e16</span> * <span class="built_in">Math</span>.random())).toString(<span class="number">36</span>),</div><div class="line">			oldSend = XMLHttpRequest.prototype.send;</div><div class="line">		<span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span> (<span class="params">name, value, filename</span>) </span>&#123;</div><div class="line">			parts.push(<span class="string">'--'</span> + boundary + <span class="string">'\r\nContent-Disposition: form-data; name="'</span> + name + <span class="string">'"'</span>);</div><div class="line">			<span class="keyword">if</span> (value <span class="keyword">instanceof</span> Blob) &#123;</div><div class="line">				parts.push(<span class="string">'; filename="'</span> + (filename || <span class="string">'blob'</span>) + <span class="string">'"\r\nContent-Type: '</span> + value.type + <span class="string">'\r\n\r\n'</span>);</div><div class="line">				parts.push(value);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				parts.push(<span class="string">'\r\n\r\n'</span> + value);</div><div class="line">			&#125;</div><div class="line">			parts.push(<span class="string">'\r\n'</span>);</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">// Override XHR send()</span></div><div class="line">		XMLHttpRequest.prototype.send = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> fr,</div><div class="line">				data,</div><div class="line">				oXHR = <span class="keyword">this</span>;</div><div class="line">			<span class="keyword">if</span> (val === o) &#123;</div><div class="line">				<span class="comment">// Append the final boundary string</span></div><div class="line">				parts.push(<span class="string">'--'</span> + boundary + <span class="string">'--\r\n'</span>);</div><div class="line">				<span class="comment">// Create the blob</span></div><div class="line">				data = getBlob(parts);</div><div class="line">				<span class="comment">// Set up and read the blob into an array to be sent</span></div><div class="line">				fr = <span class="keyword">new</span> FileReader();</div><div class="line">				fr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">					oldSend.call(oXHR, fr.result);</div><div class="line">				&#125;;</div><div class="line">				fr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">					<span class="keyword">throw</span> err;</div><div class="line">				&#125;;</div><div class="line">				fr.readAsArrayBuffer(data);</div><div class="line">				<span class="comment">// Set the multipart content type and boudary</span></div><div class="line">				<span class="keyword">this</span>.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'multipart/form-data; boundary='</span> + boundary);</div><div class="line">				XMLHttpRequest.prototype.send = oldSend;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				oldSend.call(<span class="keyword">this</span>, val);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片的上传和预览&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML的布局&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;apos;uploadImgBox&amp;apos;&amp;gt;
&amp;lt;ul class=&amp;apos;imgList&amp;apos; id=&amp;quot;imgListModif
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法教程</title>
    <link href="http://yoursite.com/2017/05/25/markdown%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/05/25/markdown语法教程/</id>
    <published>2017-05-25T09:43:03.000Z</published>
    <updated>2017-06-16T01:21:23.934Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C#title" target="_blank" rel="external">完整版Markdown 语法手册（完整版）</a></p>
<p>目录<br>[TOC]</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><pre><code>如上[TOC]所示
</code></pre><h2 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h2><p><em>我是斜体</em> 或 <em>斜体</em> </p>
<pre><code>*斜体*  _斜体_
</code></pre><p><strong>我是粗体</strong></p>
<pre><code>**粗体**
</code></pre><p><del>删除线</del></p>
<pre><code>~~删除线~~
</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://saihy2016.github.io/" target="_blank" rel="external">点我</a></p>
<p>​    [点我]（<a href="https://saihy2016.github.io/）" target="_blank" rel="external">https://saihy2016.github.io/）</a></p>
<p><img src="/2017/05/25/markdown语法教程/Users\Administrator\Desktop\my\blogMD\hua.jpg" alt="花儿" title="美丽的花儿"><br>    ![图片]（C:\Users\Administrator\Desktop\my\blogMD\hua.jpg “美丽花儿”）</p>
<h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p> 我要调到</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h2 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h2><h2 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h2><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><h2 id="LaTeX公式"><a href="#LaTeX公式" class="headerlink" title="LaTeX公式"></a>LaTeX公式</h2><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C#title&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整版Mar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客搭好啦</title>
    <link href="http://yoursite.com/2017/05/20/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%A5%BD%E5%95%A6/"/>
    <id>http://yoursite.com/2017/05/20/hexo博客搭好啦/</id>
    <published>2017-05-20T01:40:24.000Z</published>
    <updated>2017-06-16T01:21:23.933Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一上午，终于搭好了自己的博客啦，好开心，好兴奋，今天520，我要去陪女票啦，美好的一天，嗯木啊</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一上午，终于搭好了自己的博客啦，好开心，好兴奋，今天520，我要去陪女票啦，美好的一天，嗯木啊&lt;/p&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/18/hello-world/"/>
    <id>http://yoursite.com/2017/05/18/hello-world/</id>
    <published>2017-05-18T02:26:26.000Z</published>
    <updated>2017-06-16T01:21:23.933Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
